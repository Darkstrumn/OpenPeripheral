buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            name = 'Forge'
            url = 'http://files.minecraftforge.net/maven'
        }
        maven {
              name 'OpenMods Third Party'
              url 'http://repo.openmods.info/artifactory/simple/thirdparty'
        }
    }

    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
        classpath 'net.thesilkminer.gradle.translationchecker:TranslationChecker:1.1'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'java'

sourceCompatibility = targetCompatibility = "1.6"
compileJava {
    sourceCompatibility = targetCompatibility = "1.6"
}

repositories {
    maven {
        name = "OC repo"
        url = "http://maven.cil.li/"
    }
    maven {
        name "OpenMods 3rd party"
        url "http://repo.openmods.info/artifactory/thirdparty"
    }
}

dependencies {
    compile project(":OpenModsLib")

    compile "li.cil.oc:OpenComputers:MC1.10.2-1.6.1.6:api"
    compile "info.computercraft:ComputerCraft-API:1.80pr0"

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile "org.mockito:mockito-core:1.10.19"
}

def String git(String... arguments) {
    def out = new ByteArrayOutputStream()
    exec {
        executable = 'git'
        args = arguments.toList()
        standardOutput = out
    }
    out.toString().trim()
}

def String gitHash() {
    git 'rev-parse', '--short', 'HEAD'
}

def String gitBranch() {
    git 'rev-parse', '--abbrev-ref', 'HEAD'
}

def env = System.getenv()

version = mc_ver + "-" + mod_version

def in_jenkins = false

def jenkinsManifest = manifest {
    if (env.BUILD_TAG != null) { // If this works, we'll assume we're in Jenkins atleast.
        attributes("Jenkins-Build": "true", "Jenkins-Tag": env.BUILD_TAG, "Jenkins-ID": env.BUILD_ID)
        in_jenkins = true
    } else {
        attributes("Jenkins-Build": "false")
    }
}

def branch = in_jenkins ? env.GIT_BRANCH.minus("origin/") : gitBranch()
def hash = gitHash()

if (branch != null && !branch.equals("master")) {
    version += "-" + branch
}

if (env.BUILD_NUMBER != null) {
    version += "-snapshot-" + env.BUILD_NUMBER
}

def gitManifest = manifest {
    if (branch != null) {
        attributes("Git-Branch": branch, "Git-Hash": hash)
    }
}

minecraft {
    version = mc_ver + "-" + forge_ver
    runDir = 'run'

    mappings = mcp_mappings

    replaceIn "openperipheral/ModInfo.java"
    replaceIn "openperipheral/api/ApiAccess.java"
    replace '$VERSION$', mod_version
    replace '$OP-API-VERSION$', api_version
    //replace '$LIB-VERSION$', project(':OpenModsLib').mod_version
    //replace '$NEXT-LIB-VERSION$', project(':OpenModsLib').next_mod_version
}

processResources {
    inputs.property "version", rootProject.mod_version

    // Process mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        expand 'version':mod_version,'MCVersion':mc_ver
    }

    // Copy anything else directly
    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
    }
}

javadoc {
    include 'openperipheral/api/**'

    if (JavaVersion.current().isJava8Compatible()) {
        options.addBooleanOption('Xdoclint:accessibility,html,syntax', true)
    }
}

// Generate FML Coremod manifest
ext.fmlManifest = manifest {}

// Merge Jenkins and Git manifests to form final manifest in final release jar
jar {
    manifest {
        from jenkinsManifest, gitManifest, fmlManifest
    }
}

ext.sourcesPath = new File(new File(new File(buildDir, "sources"), "main"), "java")

task apiJar(type: Jar) {
    baseName "OpenPeripheralCore-API"
    version api_version

    from sourceSets.main.output
    include 'openperipheral/api/**'

    manifest {
        from jenkinsManifest, gitManifest
    }
}

task apiSrcJar(type: Jar) {
    baseName "OpenPeripheralCore-API"
    version api_version
    classifier 'sources'

    from sourcesPath
    include 'openperipheral/api/**'

    manifest {
        from jenkinsManifest, gitManifest
    }
}

task apiJavadocJar(type: Jar, dependsOn: javadoc) {
    baseName "OpenPeripheralCore-API"
    version api_version
    classifier 'javadoc'

    from 'build/docs/javadoc'

    manifest {
        from jenkinsManifest, gitManifest
    }
}

artifacts {
    archives apiJar
    archives apiSrcJar
    archives apiJavadocJar
}

task updateTranslations(type: net.thesilkminer.gradle.plugin.translationchecker.tasks.TranslationCheckTask) {
    modId = "openperipheracore"
}

task checkTranslations(type: net.thesilkminer.gradle.plugin.translationchecker.tasks.TranslationCheckTask) {
    modId = "openperipheracore"
    dryRun = true
}

task wrapper (type: Wrapper) {
    gradleVersion = "2.14"
}
