/*
 * OpenPeripheralCore build file.
 * @author Arkan <arkan@emberwalker.cc>
 */

//================================================
// Pre-execute

buildscript {
    repositories {
        // General deps
        jcenter()
        mavenCentral()
        // Minecraft Forge
        maven {
            name = 'Forge'
            url = 'http://files.minecraftforge.net/maven'
        }
    }

    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'java'

repositories {
    mavenCentral()
    jcenter()
    maven {
        name 'Forge'
        url 'http://files.minecraftforge.net/maven'
    }
    maven {
        name 'MinecraftS3'
        url 'http://s3.amazonaws.com/Minecraft.Download/libraries'
    }
    maven {
        name = "OC repo"
        url = "http://maven.cil.li/"
    }
    maven {
        name "OpenMods 3rd party"
        url "http://repo.openmods.info/artifactory/thirdparty"
    }
}

dependencies {
    compile "li.cil.oc:OpenComputers:MC1.8.9-1.5.21.1:api"
    compile "info.computercraft:ComputerCraft-API:1.78"

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile "org.mockito:mockito-core:1.10.19"
}

//================================================
// Dependencies

dependencies {
    compile project(":OpenModsLib") // Load OpenModsLib from submodule
}

//================================================
// Jar data

// Grab system env
ext.env = System.getenv()

mod_version += "." + (env.BUILD_NUMBER ?: 'dev')
version = mc_ver + "-" + mod_version

ext.in_jenkins = false
// Get Jenkins metadata
ext.jenkinsManifest = manifest {
    if (env.BUILD_TAG != null) { // If this works, we'll assume we're in Jenkins atleast.
        attributes("Jenkins-Build": "true", "Jenkins-Tag": env.BUILD_TAG, "Jenkins-ID": env.BUILD_ID)
        in_jenkins = true
    } else {
        attributes("Jenkins-Build": "false")
    }
}

def branch = null
def hash = null
def proc1 = "git rev-parse --short HEAD".execute()
proc1.in.eachLine { line -> hash = line }
proc1.err.eachLine { line -> println line }
proc1.waitFor()

if (!in_jenkins) {
    def proc2 = "git rev-parse --abbrev-ref HEAD".execute()
    proc2.in.eachLine { line -> branch = line }
    proc2.err.eachLine { line -> println line }
    proc2.waitFor()
} else { // In Jenkins
    branch = env.GIT_BRANCH.minus("origin/")
}

// Get Git metadata (if in Jenkins)
ext.gitManifest = manifest {
    if (env.GIT_BRANCH != null) {
        attributes("Git-Branch": branch, "Git-Hash": hash)
    }
}

// Setup Forge plugin
minecraft {
    version = mc_ver + "-" + forge_ver
    runDir = 'run'

    mappings = mcp_mappings

    replaceIn "openperipheral/ModInfo.java"
    replaceIn "openperipheral/api/ApiAccess.java"
    replace '$VERSION$', mod_version
    replace '$OP-API-VERSION$', api_version
    replace '$LIB-VERSION$', project(':OpenModsLib').mod_version
    replace '$NEXT-LIB-VERSION$', project(':OpenModsLib').next_mod_version
}

processResources {
    inputs.property "version", rootProject.mod_version

    // Process mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        expand 'version':mod_version,'MCVersion':mc_ver
    }

    // Copy anything else directly
    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
    }
}

javadoc {
    include 'openperipheral/api/**'

    if (JavaVersion.current().isJava8Compatible()) {
        options.addBooleanOption('Xdoclint:accessibility,html,syntax', true)
    }
}

//================================================
// Jar tasks

// Generate FML Coremod manifest
ext.fmlManifest = manifest {}

// Merge Jenkins and Git manifests to form final manifest in final release jar
jar {
    manifest {
        from jenkinsManifest, gitManifest, fmlManifest
    }
}

ext.sourcesPath = new File(new File(new File(buildDir, "sources"), "main"), "java")

task apiJar(type: Jar) {
    baseName "OpenPeripheralCore-API"
    version api_version

    from sourceSets.main.output
    include 'openperipheral/api/**'

    manifest {
        from jenkinsManifest, gitManifest
    }
}

task apiSrcJar(type: Jar) {
    baseName "OpenPeripheralCore-API"
    version api_version
    classifier 'sources'

    from sourcesPath
    include 'openperipheral/api/**'

    manifest {
        from jenkinsManifest, gitManifest
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    baseName "OpenPeripheralCore-API"
    version api_version
    classifier 'javadoc'

    from 'build/docs/javadoc'

    manifest {
        from jenkinsManifest, gitManifest
    }
}

artifacts {
    archives apiJar
    archives apiSrcJar
    archives javadocJar
}
