package openperipheral;

import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map.Entry;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import openperipheral.converter.ConverterArray;
import openperipheral.converter.ConverterDouble;
import openperipheral.converter.ConverterForgeDirection;
import openperipheral.converter.ConverterILiquidTank;
import openperipheral.converter.ConverterItemStack;
import openperipheral.definition.DefinitionClass;
import openperipheral.definition.DefinitionMethod;
import openperipheral.definition.DefinitionMod;
import openperipheral.definition.ModList;
import openperipheral.restriction.RestrictionMaximum;
import openperipheral.restriction.RestrictionMinimum;

import argo.jdom.JdomParser;
import argo.jdom.JsonField;
import argo.jdom.JsonNode;
import argo.jdom.JsonRootNode;

import net.minecraft.src.ModLoader;
import net.minecraft.tileentity.TileEntity;
import net.minecraftforge.common.Configuration;
import net.minecraftforge.common.Property;
import cpw.mods.fml.common.FMLCommonHandler;
import cpw.mods.fml.common.Mod;
import cpw.mods.fml.common.Mod.Instance;
import cpw.mods.fml.common.ModContainer;
import cpw.mods.fml.common.asm.transformers.deobf.FMLDeobfuscatingRemapper;
import cpw.mods.fml.common.event.FMLInitializationEvent;
import cpw.mods.fml.common.event.FMLPreInitializationEvent;
import cpw.mods.fml.common.registry.TickRegistry;
import cpw.mods.fml.relauncher.FMLRelauncher;
import cpw.mods.fml.relauncher.Side;
import dan200.computer.api.ComputerCraftAPI;


@Mod( modid = "OpenPeripheral", name = "OpenPeripheral", version = "0.1.0")
public class OpenPeripheral
{

	public static ModList definitions = new ModList();
	public static HashMap<Class, DefinitionClass> classList = new HashMap<Class, DefinitionClass>();
	
	@Instance( value = "OpenPeripheral" )
	public static OpenPeripheral instance;

	@Mod.PreInit
	public void preInit( FMLPreInitializationEvent evt )
	{
		Configuration configFile = new Configuration(evt.getSuggestedConfigurationFile());
		
		Property prop = configFile.get("general", "enableAnalytics", true);
		prop.comment = "Do you want analytics enabled?";
		
		prop = configFile.get("general", "currentVersion", "0.2.0");
		prop.comment = "Do not edit this file. OpenPeripheral adds no blocks or items! this value should not be changed";
		
		configFile.save();
	}

	@Mod.Init
	public void init( FMLInitializationEvent evt )
	{
		RestrictionFactory.registerRestrictionHandler("min", new IRestrictionHandler() {
			@Override
			public IRestriction createFromJson(JsonNode json) {
				return new RestrictionMinimum(json);
			}
		});

		RestrictionFactory.registerRestrictionHandler("max", new IRestrictionHandler() {
			@Override
			public IRestriction createFromJson(JsonNode json) {
				return new RestrictionMaximum(json);
			}
		});

		TypeConversionRegistry.registryTypeConverter(new ConverterArray());
		TypeConversionRegistry.registryTypeConverter(new ConverterDouble());
		TypeConversionRegistry.registryTypeConverter(new ConverterItemStack());
		TypeConversionRegistry.registryTypeConverter(new ConverterILiquidTank());
		TypeConversionRegistry.registryTypeConverter(new ConverterForgeDirection());
		
		JsonRootNode rootNode = loadJSON();
		
		if (rootNode != null) {
		    for (JsonNode modNode : rootNode.getElements()) {
		    	DefinitionMod definition = new DefinitionMod(modNode);
		    	if (definition.getModId().equals("") || ModLoader.isModLoaded(definition.getModId())) {
		    		classList.putAll(definition.getValidClasses());
		    	}
		    }
		}

		TickRegistry.registerTickHandler(new TickHandler(), Side.SERVER);
		ComputerCraftAPI.registerExternalPeripheral(TileEntity.class, new PeripheralHandler());
		
	}
	
	public static ArrayList<DefinitionMethod> getMethodsForClass(Class klass) {
		
		ArrayList<DefinitionMethod> methods = new ArrayList<DefinitionMethod>();
		for (Entry<Class, DefinitionClass> entry : classList.entrySet()) {
			if (entry.getKey().isAssignableFrom(klass)) {
				methods.addAll(entry.getValue().getMethods());
			}
		}
		
		return methods;
	}

	private JsonRootNode loadJSON() {
		URL url;
		try {
			//url = new URL("https://raw.github.com/mikeemoo/OpenPeripheral/master/methods.json");
			url = new URL("http://localhost/methods_new.json");
			URLConnection con = url.openConnection();
			Reader r = new InputStreamReader(con.getInputStream(), "UTF-8");
		    JdomParser parser = new JdomParser();
		    JsonRootNode root = parser.parse(r);
		    r.close();
		    return root;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

}